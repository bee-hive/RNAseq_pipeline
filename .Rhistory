}
}
if (paste(snp, cis_gene, sep='_') %in% rownames(abf_cis_eqtls_EA)) {
trans_genes_EA = as.character(abf_trans_eqtls_EA[paste(snp, trans_genes, sep='_'),]$gene)
trans_genes_EA = trans_genes_EA[which(!is.na(trans_genes_EA))]
if (length(trans_genes_EA) > 0) {
trans_beta = abf_trans_eqtls_EA[paste(snp, trans_genes, sep='_'),]$beta
MR_stats_list_EA[[i]] = data.frame(snp = snp, cis_gene = cis_gene, trans_gene = trans_genes_EA, cis_beta = abf_cis_eqtls_EA$beta[i], trans_beta = trans_beta, stringsAsFactors = F)
}
}
}
# Make the list lengths the same
if (length(MR_stats_list) > length(MR_stats_list_AA)) {MR_stats_list_AA[[length(MR_stats_list)]] = NULL}
if (length(MR_stats_list) > length(MR_stats_list_EA)) {MR_stats_list_EA[[length(MR_stats_list)]] = NULL}
MR_stats_list[[1]]
MR_stats_list[[2]]
MR_stats_list[[j]]$cis_beta[1]
j
MR_stats_list[[j]]$trans_beta
MR_stats_list[[j]]$cis_beta
is.null(MR_stats_list_AA)
is.null(MR_stats_list_AA[[1]])
is.null(MR_stats_list_EA[[1]])
# Simpler version only for betas
calc_betas = function(exp, genotype, cov) {
# calculate the univariate WABF
vars = rbind(cov, as.numeric(exp))
X = as.matrix(vars)
y = as.matrix(exp)
Z = solve(t(X) %*% X) %*% t(X) %*% y
# strength of association
betas = Z[nrow(Z),]
return(betas)
}
exp_cis = expression_matrix[cis_gene,]
trans_gene
exp_trans = expression_matrix[MR_stats_list[[j]]$trans_gene,]
exp_trans_perm = expression_matrix_perm[MR_stats_list[[j]]$trans_gene,]
exp_trans_perm = expression_matrix_perm[MR_stats_list[[j]]$trans_gene,]
set.seed(111)
expression_matrix_perm = expression_matrix[,sample(ncol(expression_matrix))]
set.seed(111)
expression_matrix_AA_perm = expression_matrix_AA[,sample(ncol(expression_matrix_AA))]
set.seed(111)
expression_matrix_EA_perm = expression_matrix_EA[,sample(ncol(expression_matrix_EA))]
exp_trans_perm = expression_matrix_perm[MR_stats_list[[j]]$trans_gene,]
genotype = genotype_matrix[snp,]
beta_xz = MR_stats_list[[j]]$cis_beta[1], beta_yz = MR_stats_list[[j]]$trans_beta
beta_xz = MR_stats_list[[j]]$cis_beta[1] beta_yz = MR_stats_list[[j]]$trans_beta
beta_xz = MR_stats_list[[j]]$cis_beta[1]
beta_yz = MR_stats_list[[j]]$trans_beta
beta_xz
beta_yz
inds = !is.na(genotype)
sum(inds)
is.null(beta_xz)
is.null(beta_yz_perm)
beta_yz_perm = NULL
beta_yz_perm = calc_betas(exp_trans_perm[,inds], genotype[,inds], cov[inds,])
vars = rbind(cov[inds,], as.numeric(exp_trans_perm[,inds]))
dim(cov[inds,])
dim(as.numeric(exp_trans_perm[,inds]))
dim(as.numeric(exp_trans_perm[,inds]))
calc_betas = function(exp, genotype, cov) {
# calculate the univariate WABF
vars = rbind(cov, as.numeric(genotype))
X = as.matrix(vars)
y = as.matrix(exp)
Z = solve(t(X) %*% X) %*% t(X) %*% y
# strength of association
betas = Z[nrow(Z),]
return(betas)
}
vars = rbind(cov[inds,], as.numeric(genotype[,inds]))
dim(calc_betas = function(exp, genotype, cov) {
# calculate the univariate WABF
vars = rbind(cov, as.numeric(genotype))
X = as.matrix(vars)
y = as.matrix(exp)
Z = solve(t(X) %*% X) %*% t(X) %*% y
# strength of association
betas = Z[nrow(Z),]
return(betas)
})
dim(cov)
vars = cbind(cov[inds,], genotype[,inds])
dim(vars)
dim(cov[inds,])
vars = cbind(cov[inds,], as.numeric(genotype[,inds]))
X = as.matrix(vars)
y = as.matrix(exp_trans_perm[,inds])
dim(y)
Z = solve(t(X) %*% X) %*% t(X) %*% y
dim(solve(t(X) %*% X) %*% t(X))
dim(solve(t(X) %*% X) %*% t(X) %*% t(y))
Z = solve(t(X) %*% X) %*% t(X) %*% t(y)
dim(y)
y = as.matrix(exp_cis[,inds])
dimy)
dim(y)
Z = solve(t(X) %*% X) %*% t(X) %*% t(y)
Z
betas = Z[nrow(Z),]
betas
y = as.matrix(exp_trans_perm[,inds])
Z = solve(t(X) %*% X) %*% t(X) %*% t(y)
# strength of association
betas = Z[nrow(Z),]
betas
calc_betas = function(exp, genotype, cov) {
# calculate the univariate WABF
vars = cbind(cov, as.numeric(genotype))
X = as.matrix(vars)
y = as.matrix(exp)
Z = solve(t(X) %*% X) %*% t(X) %*% t(y)
# strength of association
betas = Z[nrow(Z),]
return(as.numeric(betas))
}
beta_xz
beta_yz
beta_yz_perm = calc_betas(exp_trans_perm[,inds], genotype[,inds], cov[inds,])
beta_yz_perm
inds = !is.na(genotype)
# Return if genotype is uniform
if (length(unique(as.numeric(genotype[,inds]))) == 1) {return(NULL)}
# Get the beta values if necessary
if (is.null(beta_xz)) {beta_xz = calc_betas(exp_cis[,inds], genotype[,inds], cov[inds,])}
if (is.null(beta_yz)) {beta_yz = calc_betas(exp_trans[,inds], genotype[,inds], cov[inds,])}
if (is.null(beta_yz_perm)) {beta_yz_perm = calc_betas(exp_trans_perm[,inds], genotype[,inds], cov[inds,])}
beta_xz
beta_yz_perm
dim(X)
dim(Z)
dim(vars)
dim(genotype)
X = as.matrix(cov[inds,])
dim(X)
g = as.matrix(genotype[,inds])
hist(g)
exp_cis = t(exp_cis[,inds])
exp_cis
mean(exp_cis)
exp_cis = t(exp_cis[,inds])
exp_cis = center_colmeans(exp_cis)
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
exp_trans_perm = t(exp_trans_perm[,inds])
exp_trans_perm = center_colmeans(exp_trans_perm)
dim(exp_trans_perm)
calc_betas = function(exp, genotype, cov) {
# calculate the univariate WABF
vars = cbind(cov, as.numeric(genotype))
X = as.matrix(vars)
y = as.matrix(exp)
Z = solve(t(X) %*% X) %*% t(X) %*% y
# strength of association
betas = Z[nrow(Z),]
return(as.numeric(betas))
}
calc_betas(exp_cis, genotype[,inds], cov[inds,])
calc_betas(exp_trans, genotype[,inds], cov[inds,])
calc_betas(exp_trans_perm, genotype[,inds], cov[inds,])
dim(as.matrix(genotype[,inds]))
g = as.matrix(t(genotype[,inds]))
dim(g)
X = as.matrix(cov[inds,])
fit_space = tryCatch({X %*% solve(t(X) %*% X) %*% t(X)}, error = function(e) {c(NA)})
dim(fit_space)
mean(g)
center_colmeans(g)
g = center_colmeans(g)
mean(G)
mean(g)
dim(X)
X = center_colmeans(X)
fit_space = tryCatch({X %*% solve(t(X) %*% X) %*% t(X)}, error = function(e) {c(NA)})
if (is.na(fit_space[1])) {return(NULL)}
# orthogonalize w.r.t. covariates
res_y = exp_trans - (fit_space %*% exp_trans)
res_y_perm = exp_trans_perm - (fit_space %*% exp_trans_perm)
res_y_cis = exp_cis - (fit_space %*% exp_cis)
res_g = g - (fit_space %*% g)
res_g
res_y
dim(res_y)
dim(res_y_perm)
dim(res_y_cis)
beta_mr = beta_yz/beta_xz
beta_mr
res_y[,1]
sig_sq = sapply(c(1:length(beta_mr)), function(n) {t(res_y[,n] - res_x*beta_mr[n]) %*% (res_y[,n] - res_x*beta_mr[n]) / (length(res_g) - 3)})
res_x = exp_cis - (fit_space %*% exp_cis)
sig_sq = sapply(c(1:length(beta_mr)), function(n) {t(res_y[,n] - res_x*beta_mr[n]) %*% (res_y[,n] - res_x*beta_mr[n]) / (length(res_g) - 3)})
sig_sq
var_beta = sig_sq * as.numeric((t(res_g) %*% res_g) / (t(res_x) %*% res_g)^2)
var_beta
MR_Wald = (beta_mr)^2/var_beta
MR_Wald
res_y = exp_trans - (fit_space %*% exp_trans)
res_y_perm = exp_trans_perm - (fit_space %*% exp_trans_perm)
res_x = exp_cis - (fit_space %*% exp_cis)
res_g = g - (fit_space %*% g)
# Calculate the Wald stats
beta_mr = beta_yz/beta_xz
# res_x is the cis-gene expression value - essentially (y-beta*x)^T * (y-beta*x) / (n-3)
sig_sq = sapply(c(1:length(beta_mr)), function(n) {t(res_y[,n] - res_x*beta_mr[n]) %*% (res_y[,n] - res_x*beta_mr[n]) / (length(res_g) - 3)})
var_beta = sig_sq * as.numeric((t(res_g) %*% res_g) / (t(res_x) %*% res_g)^2)
MR_Wald = (beta_mr)^2/var_beta
# Calculate the Wald stats for permuted
beta_mr_perm = beta_yz_perm/beta_xz
sig_sq_perm = sapply(c(1:length(beta_mr_perm)), function(n) {t(res_y_perm[,n] - res_x*beta_mr_perm[n]) %*% (res_y_perm[,n] - res_x*beta_mr_perm[n]) / (length(res_g) - 3)})
var_beta_perm = sig_sq_perm * as.numeric((t(res_g) %*% res_g) / (t(res_x) %*% res_g)^2)
MR_Wald_perm = (beta_mr_perm)^2/var_beta_perm
MR_Wald
MR_Wald_perm
data.frame(MR_Wald = MR_Wald, MR_Wald_perm = MR_Wald_perm)
MR_stats_list[[j]]
calc_freq_MR_with_NAs = function(exp_cis, exp_trans, exp_trans_perm, genotype, cov, beta_xz = NULL, beta_yz = NULL, beta_yz_perm = NULL) {
# Remove rows from genotypes that are NA
inds = !is.na(genotype)
# Return if genotype is uniform
if (length(unique(as.numeric(genotype[,inds]))) == 1) {return(NULL)}
# Format the expression values
exp_cis = t(exp_cis[,inds])
exp_cis = center_colmeans(exp_cis)
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
exp_trans_perm = t(exp_trans_perm[,inds])
exp_trans_perm = center_colmeans(exp_trans_perm)
# Get the beta values if necessary
if (is.null(beta_xz)) {beta_xz = calc_betas(exp_cis, genotype[,inds], cov[inds,])}
if (is.null(beta_yz)) {beta_yz = calc_betas(exp_trans, genotype[,inds], cov[inds,])}
if (is.null(beta_yz_perm)) {beta_yz_perm = calc_betas(exp_trans_perm, genotype[,inds], cov[inds,])}
# Set up the linear equation
X = as.matrix(cov[inds,])
X = center_colmeans(X)
g = as.matrix(t(genotype[,inds]))
g = center_colmeans(g)
fit_space = tryCatch({X %*% solve(t(X) %*% X) %*% t(X)}, error = function(e) {c(NA)})
if (is.na(fit_space[1])) {return(NULL)}
# orthogonalize w.r.t. covariates
res_y = exp_trans - (fit_space %*% exp_trans)
res_y_perm = exp_trans_perm - (fit_space %*% exp_trans_perm)
res_x = exp_cis - (fit_space %*% exp_cis)
res_g = g - (fit_space %*% g)
# Calculate the Wald stats
beta_mr = beta_yz/beta_xz
# res_x is the cis-gene expression value - essentially (y-beta*x)^T * (y-beta*x) / (n-3)
sig_sq = sapply(c(1:length(beta_mr)), function(n) {t(res_y[,n] - res_x*beta_mr[n]) %*% (res_y[,n] - res_x*beta_mr[n]) / (length(res_g) - 3)})
var_beta = sig_sq * as.numeric((t(res_g) %*% res_g) / (t(res_x) %*% res_g)^2)
MR_Wald = (beta_mr)^2/var_beta
# Calculate the Wald stats for permuted
beta_mr_perm = beta_yz_perm/beta_xz
sig_sq_perm = sapply(c(1:length(beta_mr_perm)), function(n) {t(res_y_perm[,n] - res_x*beta_mr_perm[n]) %*% (res_y_perm[,n] - res_x*beta_mr_perm[n]) / (length(res_g) - 3)})
var_beta_perm = sig_sq_perm * as.numeric((t(res_g) %*% res_g) / (t(res_x) %*% res_g)^2)
MR_Wald_perm = (beta_mr_perm)^2/var_beta_perm
return(data.frame(MR_Wald = MR_Wald, MR_Wald_perm = MR_Wald_perm))
}
freq_MR = calc_freq_MR_with_NAs(expression_matrix[cis_gene,], expression_matrix[MR_stats_list[[j]]$trans_gene,], expression_matrix_perm[MR_stats_list[[j]]$trans_gene,], genotype_matrix[snp,], cov, beta_xz = MR_stats_list[[j]]$cis_beta[1], beta_yz = MR_stats_list[[j]]$trans_beta)
freq_MR
freq_MR_EA = calc_freq_MR_with_NAs(expression_matrix_EA[cis_gene,], expression_matrix_EA[MR_stats_list_EA[[j]]$trans_gene,], expression_matrix_EA_perm[MR_stats_list_EA[[j]]$trans_gene,], genotype_matrix_EA[snp,], cov_EA, beta_xz = MR_stats_list_EA[[j]]$cis_beta[1], beta_yz = MR_stats_list_EA[[j]]$trans_beta)
freq_MR_EA
freq_MR_AA = calc_freq_MR_with_NAs(expression_matrix_AA[cis_gene,], expression_matrix_AA[MR_stats_list_AA[[j]]$trans_gene,], expression_matrix_AA_perm[MR_stats_list_AA[[j]]$trans_gene,], genotype_matrix_AA[snp,], cov_AA, beta_xz = MR_stats_list_AA[[j]]$cis_beta[1], beta_yz = MR_stats_list_AA[[j]]$trans_beta)
!is.null(MR_stats_list_AA[[j]])
MR_stats_list_AA[[j]]
!is.null(MR_stats_list_AA[[j]])
dim(g)
ortho_covs = X - (g %*% solve(t(g) %*% g) %*% t(g) %*% X)
dim(ortho_covs)
ortho_covs = cbind(ortho_covs, g)
dim(ortho_covs)
exp_cis_ortho = exp_cis - (ortho_covs %*% solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_cis)
ortho_covs = cbind(ortho_covs, exp_cis_ortho)
colnames(ortho_covs)
dim(exp_trans)
Z = solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_trans
dim(Z)
betas = data.frame(beta_trans = Z[(nrow(Z)-1),], theta = Z[nrow(Z),])
betas
betas[,1] = betas[,1]/beta_xz
betas
beta_xz
exp_trans = expression_matrix
dim(exp_trans)
MR_stats_list[[j]]$trans_gene
dim(exp_trans)
inds = !is.na(genotype)
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
dim(exp_trans)
X = as.matrix(cov[inds,])
X = center_colmeans(X)
g = as.matrix(t(genotype[,inds]))
g = center_colmeans(g)
# orthogonalize X with respect to genotype
ortho_covs = X - (g %*% solve(t(g) %*% g) %*% t(g) %*% X)
ortho_covs = cbind(ortho_covs, g)
# orthogonalize exp_cis with respect to all covariates
exp_cis_ortho = exp_cis - (ortho_covs %*% solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_cis)
ortho_covs = cbind(ortho_covs, exp_cis_ortho)
# Add the appropriate column names
# colnames(ortho_covs) = c(colnames(ortho_covs)[c(1:(ncol(ortho_covs)-2))], c('SNP', 'exp_cis'))
# Now solve fit exp_trans jointly with respect to all covariates, genotype, and exp_cis
Z = solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_trans
dim(Z)
betas = data.frame(beta_trans = Z[(nrow(Z)-1),], theta = Z[nrow(Z),])
betas[,1] = betas[,1]/beta_xz
total_V = var(as.matrix(betas))
total_V
total_V[1,2] = total_V[2,1] = 0
# take out the empirical mean? currently just take the zero vector
# total_means = colMeans(as.matrix(betas))
total_means = as.matrix(c(0,0))
MR_stats_list[[j]]$trans_gene
gene_list = MR_stats_list[[j]]$trans_gene
betas
gene_list
betas["ENSG00000134571.10"]
betas["ENSG00000134571.10",]
H00_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_01 = total_V
total_V_01[2,2] = total_V_01[2,2] + W_MR_2
H01_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_01))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_01) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_10 = total_V
total_V_10[1,1] = total_V_10[1,1] + W_MR_1
H10_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_10))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_10) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_11 = total_V
total_V_11[1,1] = total_V_11[1,1] + W_MR_1
total_V_11[2,2] = total_V_11[2,2] + W_MR_2
H11_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_11))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_11) %*% t(as.matrix(betas[x,] - total_means))))})
trans_risk_1 = 1.5
W_MR_1 = (log(trans_risk_1)/1.96)^2
trans_risk_2 = 1.1
W_MR_2 = (log(trans_risk_2)/1.96)^2
# Say we expect roughly one out of 1e5 SNPs to be eQTLs
pi_1 = 1e-5
PO = (1-pi_1)/pi_1
# parameters for MR-ABF
snp_pi_1 = 1e-3 # expecting 1 out of ~10000 true trans-eQTLs among chosen cis-eQTLs
gene_pi_1 = 1e-3 # expecting nonzero contribution in ~100 trans genes
H00_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_01 = total_V
total_V_01[2,2] = total_V_01[2,2] + W_MR_2
H01_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_01))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_01) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_10 = total_V
total_V_10[1,1] = total_V_10[1,1] + W_MR_1
H10_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_10))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_10) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_11 = total_V
total_V_11[1,1] = total_V_11[1,1] + W_MR_1
total_V_11[2,2] = total_V_11[2,2] + W_MR_2
H11_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_11))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_11) %*% t(as.matrix(betas[x,] - total_means))))})
data.frame(H00_ABF, H01_ABF, H10_ABF, H11_ABF)
return_frame = data.frame(H00_ABF, H01_ABF, H10_ABF, H11_ABF)
return_frame$MR_PPA = ((snp_pi_1 * H10_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF)) / (H00_ABF + (snp_pi_1 * H10_ABF) + (gene_pi_1 * H01_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF))
return_frame
cbind(betas[gene_list,], return_frame)
calc_MR_ABF_with_NAs = function(exp_cis, exp_trans, genotype, cov, beta_xz, gene_list, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1) {
# Remove rows from genotypes that are NA
inds = !is.na(genotype)
# Return if genotype is uniform
if (length(unique(as.numeric(genotype[,inds]))) == 1) {return(NULL)}
# Format the expression values
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
# Calculate the Bayesian MR-ABF
X = as.matrix(cov[inds,])
X = center_colmeans(X)
g = as.matrix(t(genotype[,inds]))
g = center_colmeans(g)
# orthogonalize X with respect to genotype
ortho_covs = X - (g %*% solve(t(g) %*% g) %*% t(g) %*% X)
ortho_covs = cbind(ortho_covs, g)
# orthogonalize exp_cis with respect to all covariates
exp_cis_ortho = exp_cis - (ortho_covs %*% solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_cis)
ortho_covs = cbind(ortho_covs, exp_cis_ortho)
# Add the appropriate column names
# colnames(ortho_covs) = c(colnames(ortho_covs)[c(1:(ncol(ortho_covs)-2))], c('SNP', 'exp_cis'))
# Now solve fit exp_trans jointly with respect to all covariates, genotype, and exp_cis
Z = solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_trans
# strength of association
betas = data.frame(beta_trans = Z[(nrow(Z)-1),], theta = Z[nrow(Z),])
# scale the trans beta with cis beta for beta IV
betas[,1] = betas[,1]/beta_xz
# empirical variance V
total_V = var(as.matrix(betas))
total_V[1,2] = total_V[2,1] = 0
# take out the empirical mean? currently just take the zero vector
# total_means = colMeans(as.matrix(betas))
total_means = as.matrix(c(0,0))
H00_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_01 = total_V
total_V_01[2,2] = total_V_01[2,2] + W_MR_2
H01_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_01))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_01) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_10 = total_V
total_V_10[1,1] = total_V_10[1,1] + W_MR_1
H10_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_10))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_10) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_11 = total_V
total_V_11[1,1] = total_V_11[1,1] + W_MR_1
total_V_11[2,2] = total_V_11[2,2] + W_MR_2
H11_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_11))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_11) %*% t(as.matrix(betas[x,] - total_means))))})
return_frame = data.frame(H00_ABF, H01_ABF, H10_ABF, H11_ABF)
return_frame$MR_PPA = ((snp_pi_1 * H10_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF)) / (H00_ABF + (snp_pi_1 * H10_ABF) + (gene_pi_1 * H01_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF))
return_frame = cbind(betas[gene_list,], return_frame)
return(return_frame)
}
MR_ABF_df = calc_MR_ABF_with_NAs(expression_matrix[cis_gene,], expression_matrix, genotype_matrix[snp,], cov, MR_stats_list[[j]]$cis_beta[1], MR_stats_list[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
dim(expression_matrix[cis_gene,])
dim(expression_matrix)
dim(genotype_matrix[snp,])
dim(cov)
MR_stats_list[[j]]$cis_beta[1]
MR_stats_list[[j]]$trans_gene
W_MR_1
W_MR_2
snp_pi_1
exp_cis =expression_matrix[cis_gene,]
exp_trans = expression_matrix
genotype = genotype_matrix[snp,]
beta_xz = MR_stats_list[[j]]$cis_beta[1]
gene_list = MR_stats_list[[j]]$trans_gene
inds = !is.na(genotype)
inds
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
dim(exp_trans)
X = as.matrix(cov[inds,])
X = center_colmeans(X)
g = as.matrix(t(genotype[,inds]))
g = center_colmeans(g)
dim(X)
dim(g)
ortho_covs = X - (g %*% solve(t(g) %*% g) %*% t(g) %*% X)
ortho_covs = cbind(ortho_covs, g)
dim(ortho_covs)
exp_cis = t(exp_cis[,inds])
exp_cis = center_colmeans(exp_cis)
dim(exp_cis)
exp_cis_ortho = exp_cis - (ortho_covs %*% solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_cis)
dim)exp_cis_ortho_
dim(exp_cis_ortho)
ortho_covs = cbind(ortho_covs, exp_cis_ortho)
Z = solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_trans
calc_MR_ABF_with_NAs = function(exp_cis, exp_trans, genotype, cov, beta_xz, gene_list, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1) {
# Remove rows from genotypes that are NA
inds = !is.na(genotype)
# Return if genotype is uniform
if (length(unique(as.numeric(genotype[,inds]))) == 1) {return(NULL)}
# Format the expression values
exp_cis = t(exp_cis[,inds])
exp_cis = center_colmeans(exp_cis)
exp_trans = t(exp_trans[,inds])
exp_trans = center_colmeans(exp_trans)
# Calculate the Bayesian MR-ABF
X = as.matrix(cov[inds,])
X = center_colmeans(X)
g = as.matrix(t(genotype[,inds]))
g = center_colmeans(g)
# orthogonalize X with respect to genotype
ortho_covs = X - (g %*% solve(t(g) %*% g) %*% t(g) %*% X)
ortho_covs = cbind(ortho_covs, g)
# orthogonalize exp_cis with respect to all covariates
exp_cis_ortho = exp_cis - (ortho_covs %*% solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_cis)
ortho_covs = cbind(ortho_covs, exp_cis_ortho)
# Add the appropriate column names
# colnames(ortho_covs) = c(colnames(ortho_covs)[c(1:(ncol(ortho_covs)-2))], c('SNP', 'exp_cis'))
# Now solve fit exp_trans jointly with respect to all covariates, genotype, and exp_cis
Z = solve(t(ortho_covs) %*% ortho_covs) %*% t(ortho_covs) %*% exp_trans
# strength of association
betas = data.frame(beta_trans = Z[(nrow(Z)-1),], theta = Z[nrow(Z),])
# scale the trans beta with cis beta for beta IV
betas[,1] = betas[,1]/beta_xz
# empirical variance V
total_V = var(as.matrix(betas))
total_V[1,2] = total_V[2,1] = 0
# take out the empirical mean? currently just take the zero vector
# total_means = colMeans(as.matrix(betas))
total_means = as.matrix(c(0,0))
H00_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_01 = total_V
total_V_01[2,2] = total_V_01[2,2] + W_MR_2
H01_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_01))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_01) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_10 = total_V
total_V_10[1,1] = total_V_10[1,1] + W_MR_1
H10_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_10))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_10) %*% t(as.matrix(betas[x,] - total_means))))})
total_V_11 = total_V
total_V_11[1,1] = total_V_11[1,1] + W_MR_1
total_V_11[2,2] = total_V_11[2,2] + W_MR_2
H11_ABF = sapply(gene_list, function(x) {(1 / sqrt(det(total_V_11))) * exp(-0.5 * (as.matrix(betas[x,] - total_means) %*% solve(total_V_11) %*% t(as.matrix(betas[x,] - total_means))))})
return_frame = data.frame(H00_ABF, H01_ABF, H10_ABF, H11_ABF)
return_frame$MR_PPA = ((snp_pi_1 * H10_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF)) / (H00_ABF + (snp_pi_1 * H10_ABF) + (gene_pi_1 * H01_ABF) + (snp_pi_1 * gene_pi_1 * H11_ABF))
return_frame = cbind(betas[gene_list,], return_frame)
return(return_frame)
}
MR_ABF_df = calc_MR_ABF_with_NAs(expression_matrix[cis_gene,], expression_matrix, genotype_matrix[snp,], cov, MR_stats_list[[j]]$cis_beta[1], MR_stats_list[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
MR_ABF_df
MR_ABF_df_perm = calc_MR_ABF_with_NAs(expression_matrix[cis_gene,], expression_matrix_perm, genotype_matrix[snp,], cov, MR_stats_list[[j]]$cis_beta[1], MR_stats_list[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
MR_ABF_df_perm
MR_ABF_df = calc_MR_ABF_with_NAs(expression_matrix[cis_gene,], expression_matrix, genotype_matrix[snp,], cov, MR_stats_list[[j]]$cis_beta[1], MR_stats_list[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
MR_ABF_df_perm = calc_MR_ABF_with_NAs(expression_matrix[cis_gene,], expression_matrix_perm, genotype_matrix[snp,], cov, MR_stats_list[[j]]$cis_beta[1], MR_stats_list[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
colnames(MR_ABF_df_perm) = c('beta_trans_perm', 'theta_perm', 'H00_ABF_perm', 'H01_ABF_perm', 'H10_ABF_perm', 'H11_ABF_perm', 'MR_PPA_perm')
total_df = cbind(MR_ABF_df, MR_ABF_df_perm)
total_df
MR_ABF_df = calc_MR_ABF_with_NAs(expression_matrix_EA[cis_gene,], expression_matrix_EA, genotype_matrix_EA[snp,], cov_EA, MR_stats_list_EA[[j]]$cis_beta[1], MR_stats_list_EA[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
MR_ABF_df_perm = calc_MR_ABF_with_NAs(expression_matrix_EA[cis_gene,], expression_matrix_perm_EA, genotype_matrix_EA[snp,], cov_EA, MR_stats_list_EA[[j]]$cis_beta[1], MR_stats_list_EA[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
colnames(MR_ABF_df_perm) = c('beta_trans_perm', 'theta_perm', 'H00_ABF_perm', 'H01_ABF_perm', 'H10_ABF_perm', 'H11_ABF_perm', 'MR_PPA_perm')
total_df = cbind(MR_ABF_df, MR_ABF_df_perm)
MR_ABF_df = calc_MR_ABF_with_NAs(expression_matrix_EA[cis_gene,], expression_matrix_EA, genotype_matrix_EA[snp,], cov_EA, MR_stats_list_EA[[j]]$cis_beta[1], MR_stats_list_EA[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
MR_ABF_df_perm = calc_MR_ABF_with_NAs(expression_matrix_EA[cis_gene,], expression_matrix_EA_perm, genotype_matrix_EA[snp,], cov_EA, MR_stats_list_EA[[j]]$cis_beta[1], MR_stats_list_EA[[j]]$trans_gene, W_MR_1, W_MR_2, snp_pi_1, gene_pi_1)
colnames(MR_ABF_df_perm) = c('beta_trans_perm', 'theta_perm', 'H00_ABF_perm', 'H01_ABF_perm', 'H10_ABF_perm', 'H11_ABF_perm', 'MR_PPA_perm')
total_df = cbind(MR_ABF_df, MR_ABF_df_perm)
total_df
